; Mary Taft, Period 9

; (define L '(Mr (Jaishankar) made (me) work (on this) list))

; 1.)
; (length L)
; --> (+ 1 '((Jaishankar) made (me) work (on this) list))
; --> (+ 2 '(made (me) work (on this) list))
; --> (+ 3 '((me) work (on this) list))
; --> (+ 4 '(work (on this) list))
; --> (+ 5 '((on this) list))
; --> (+ 6 '(list))
; --> (+ 7 '())
; 7

; 2.)
; --> (caddr L)
; --> (cadr '((Jaishankar) made (me) work (on this) list))
; --> (car '(made (me) work (on this) list))
; made

; 3.)
; --> (cdr L) = ((Jaishankar) made (me) work (on this) list)
; --> (car (cdr L)) = (Jaishankar)
; (car (car (cdr L)))

; 4.)
; --> (cdr L) = ((Jaishankar) made (me) work (on this) list)
; --> (cdr (cdr L)) = (made (me) work (on this) list)
; --> (cdr (cdr (cdr L))) = ((me) work (on this) list)
; --> (cdr (cdr (cdr (cdr L)))) = (work (on this) list)
; (car (cdr (cdr (cdr (cdr L)))))

; 5.)
; --> (cdr L) = ((Jaishankar) made (me) work (on this) list)
; --> (cdr (cdr L)) = (made (me) work (on this) list)
; --> (cdr (cdr (cdr L))) = ((me) work (on this) list)
; --> (cdr (cdr (cdr (cdr L)))) = (work (on this) list)
; --> (cdr (cdr (cdr (cdr (cdr L))))) = ((on this) list)
; --> (car (cdr (cdr (cdr (cdr (cdr L)))))) = (on this)
; --> (cdr (car (cdr (cdr (cdr (cdr (cdr L))))))) = (this)
; (car (cdr (car (cdr (cdr (cdr (cdr (cdr L))))))))

; 6.)
(define (sumOdd L)
  (cond ((null? L) 0)
        ((even? (car L)) (sumOdd (cdr L)))
        (else (+ (car L)
                 (sumOdd (cdr L))))))

; 7.)
(define (subsumOdd L)
  (cond ((null? L) 0)
        ((list? (car L)) (+ (subsumOdd (car L))
                            (subsumOdd (cdr L))))
        ((even? (car L)) (subsumOdd (cdr L)))
        (else (+ (car L)
                 (subsumOdd (cdr L))))))

; 8.)
(define (inList? L x)
  (cond ((null? L) #f)
        ((list? (car L)) (or (inlist? (car L) x)
                             (inlist? (cdr L) x)))
        ((equal? (car L) x) #t)
        (else (inlist? (cdr L) x))))