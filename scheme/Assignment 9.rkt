(define (TheOddsOf L)
  (cond ((null? L) L)
        ((odd? (car L)) (cons (car L) (TheOddsOf (cdr L))))
        (else (cons (+ 1 (car L)) (TheOddsOf (cdr L))))))

(define (TheOddsOf2 L)
  (cond ((null? L) L)
        ((list? (car L)) (append (theOddsOf2 (car L)) (TheOddsOf2 (cdr L))))
        ((odd? (car L)) (cons (car L) (TheOddsOf2 (cdr L))))
        (else (cons (+ 1 (car L)) (TheOddsOf2 (cdr L))))))

(define (mergelists L1 L2)
  (cond ((null? L1) L2)
        ((null? L2) L1)
        ((< (car L1) (car L2)) (cons (car L1) (mergelists (cdr L1) L2)))
        (else (cons (car L2) (mergelists L1 (cdr L2))))))

(define (sum L)
  (cond ((null? L) 0)
        ((list? (car L)) (+ (sum (car L)) (sum (cdr L))))
        (else (+ (abs (car L)) (sum (cdr L))))))

(define (sum-lists L1 L2)
  (cond ((null? L1) L2)
        ((null? L2) L1)
        (else (cons (+ (car L1) (car L2)) (sum-lists (cdr L1) (cdr L2))))))

(define (remove L n)
  (cond ((null? L) L)
        ((equal? (car L) n) (remove (cdr L) n))
        (else (cons (car L) (remove (cdr L) n)))))

(define (minList L)
  (if (null? (cdr L))
      (car L)
      (min (car L) (minList (cdr L)))))

(define (removeMin L)
  (cond ((null? L) L)
        ((null? (cdr L)) (cdr L))
        (else (remove L (minList L)))))

(define (remove2 L n)
  (cond ((null? L) L)
        ((list? (car L)) (append (remove2 (car L) n) (remove2 (cdr L) n)))
        ((equal? (car L) n) (remove2 (cdr L) n))
        (else (cons (car L) (remove2 (cdr L) n)))))

(define (hasanEven L)
  (cond ((null? L) #f)
            ((list? (car L)) (or (hasanEven (car L)) (hasanEven (cdr L))))
            ((even? (car L)) #t)
            (else #f)))

(define (Pairs L)
  (cond ((null? L) 0)
        ((null? (cdr L)) 0)
        ((= (car L) (car (cdr L))) (+ 1 (Pairs (cdr L))))
        (else (Pairs (cdr L)))))

(define (replace-nth k a L)
  (if (= k 1)
      (cons a (cdr L))
      (cons (car L) (replace-nth (- k 1) a (cdr L)))))